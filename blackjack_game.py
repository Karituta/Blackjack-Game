# --------------------------------------------------------------
# Problem Description 
# --------------------------------------------------------------

# When playing blackjack, the player has the freedom to choose what they want to, such as hitting, standing, or doubling down, 
# and with this freedom the need to understand the game and how to effectively play is vital if the player wants to make a profit. 
# However, for beginners who enjoy playing blackjack and want to improve, but do not feel comfortable with the risk of losing thousands 
# of dollars playing in a real casino. With my code, I am aiming to create a blackjack simulator to help blackjack players practice 
# and develop their skills without the fear of losing real world money. My program will allow the player to hit 
# (The dealer deals another card to the player), stand (The player no longer wants anymore cards and the dealer’s turn begins), 
# double down (Double the bet, but can only hit once), call insurance (Protects the player against the dealer if the dealer has a 
# blackjack), and split (Play two separate hands). In addition, the dealer will be able to hit and stand to simulate how a dealer 
# will act in a real blackjack game. The player’s money, actions, and round history will be stored on a file called player_name_profile, 
# where player_name will be replaced by the name entered by the  player. After each game, the player can use the file to review their 
# game play and learn from their mistakes and build confidence to play inside a casino.

#imports
from datetime import datetime
import os, random, time

#game loop
play_game = True

#dictionary used to convert the pip value of each card to an integer 
string_to_int = {"two":2,"three":3,"four":4,"five":5,"six":6,"seven":7,"eight":8,"nine":9,"ten":10,"jack":10,"queen":10,"king":10,"ace":11}

#player score and resources
player = {"total_card_value":0,"money":100,"bet":0,"round":1,"winnings":0}

#player's hand
players_hand = {}

#dealer's hand
dealers_hand = {}

#used to calculate the value of the dealer's and the player's hand 
player_hand_value = []
dealer_hand_value = []
hand_1_value = []
hand_2_value = []

#stored the ace cards that the player or dealer choose to convert to a card with a value of 1 or kept as a card valued 11
converted_cards = []
dealer_converted_cards = []
hand_1_converted_cards = []
hand_2_converted_cards = []

#used by print_card() to format each card generated by the function so that they can be iterated through and printed to terminal
players_display = []
format = []
dealers_display = []
dealer_format = []
hand_1_display = []
hand_1_format = []
hand_2_display = []
hand_2_format = []

#create a the deck of cards
def create_deck():
    global deck
    deck = {}  
    values = ["two","three","four","five","six","seven","eight","nine","ten","jack","queen","king","ace"]
    suits = ["diamonds","clubs","hearts","spades"] 
    prep = []
    keys = [x for x in range(52)]
    for value in values:
        for suit in suits:
            prep.append((value,suit))
    #number of cards in a standard deck(52)
    for i in range(52):
            deck[keys[i]] = prep[i]

#set ups the deck so the functions can access the deck
create_deck() 

#deals the first hand to the dealer and the player for that round
def first_deal():
    for i in range(2):
        #deals the player two cards 
        rand_num = random.choice(available_cards)
        available_cards.remove(rand_num)
        players_hand[rand_num] = deck[rand_num]
        #deals the dealer two cards
        rand_num = random.choice(available_cards)
        available_cards.remove(rand_num)
        dealers_hand[rand_num] = deck[rand_num]
    #adds the value of each card to player_hand_value and dealer_hand_value
    for i in players_hand.keys():
        player_hand_value.append(string_to_int[players_hand[i][0]])
    for i in dealers_hand.keys():
        dealer_hand_value.append(string_to_int[dealers_hand[i][0]])
    
    #calls the functions to generate cards to be printed into the terminal and player profile file
    print_card(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
    print_card_text(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
    print_cards_blank()
    print_card_blank_text()

    for i in players_hand.keys():
        print_card(players_hand[i][0],players_hand[i][1],True)
        print_card_text(players_hand[i][0],players_hand[i][1],True)

    print("======= Dealer's Hand =======")
    print_cards_addition("dealer")

    time.sleep(0.5)

    print("========= Your Hand =========")
    print_cards_addition("player")

#prints in a tpyewriter fashion
def slow_print(string,delay = 0.05):
    for i in string:
        print(i,end = "")
        time.sleep(delay)
    return ""

#check if the bet placed is a valid number and if it is not, then continuous asks for a new input
def is_number(num):
    if num.replace(".","",1).isnumeric() == False:
        valid = False
        while valid == False:
            if num.replace(".","").isnumeric() == False:
                slow_print("Sorry that is not a valid bet. Please enter numerical values such as '10' or '10.50'\n")
                num = input(slow_print("You currently have " + str(player["money"]) + " dollars.\nPlace a bet: \n> "))
                if num.replace(".","").isnumeric() == False:
                    continue
                else:
                    break
    global player_bet
    player_bet = num
    return True

#depending on the hand used for the round (player's hand, split hands which are hand 1 and 2), the function adds a generates a new card and adds to the hand and appends the card's value to its respective hand_value_list 
def hit(hand):
    #generates a new card for the player
    if hand == "player":
        rand_num = random.choice(available_cards)
        #once the card has been dealt, it's key is removed from avaliable cards so it can not be drawn twice with the same deck
        available_cards.remove(rand_num)
        players_hand[rand_num] = deck[rand_num]
        
        #adds the new card's value to player_hand_value
        player_hand_value.append(string_to_int[players_hand[rand_num][0]])

        #clears previous lists used to generate previous rounds of cards
        format.clear()
        players_display.clear()
        dealer_format.clear()
        dealers_display.clear()
        players_display_text.clear()
        player_format_text.clear()
        dealers_display_text.clear()
        dealer_format_text.clear()

        #prints the cards into the terminal and the player's profile file
        print_card(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
        print_card_text(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
        print_cards_blank()
        print_card_blank_text()

        for i in players_hand.keys():
            print_card(players_hand[i][0],players_hand[i][1],True)
            print_card_text(players_hand[i][0],players_hand[i][1],True)

        print("======= Dealer's Hand =======")
        print_cards_addition("dealer")

        time.sleep(0.5)

        print("========= Your Hand =========")
        print_cards_addition("player")

        #checks if the player's new card is an ace that needs to be converted 
        ace_conversion("player")

    elif hand == 1:
        #generates a new card for hand 1
        rand_num = random.choice(available_cards)
        available_cards.remove(rand_num)
        hand_1[rand_num] = deck[rand_num]

        hand_1_value.append(string_to_int[hand_1[rand_num][0]])
        
        #clears previous lists used to generate previous rounds of cards
        hand_1_format.clear()
        hand_1_display.clear()
        dealer_format.clear()
        dealers_display.clear()
        dealers_display_text.clear()
        dealer_format_text.clear()
        hand_1_display_text.clear()
        hand_1_format_text.clear()

        print_card(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
        print_card_text(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
        print_cards_blank()
        print_card_blank_text()
        
        for i in hand_1.keys():
            print_card(hand_1[i][0],hand_1[i][1],"hand_1")
            print_card_text(hand_1[i][0],hand_1[i][1],"hand_1")

        print("======= Dealer's Hand =======")
        print_cards_addition("dealer")

        time.sleep(0.5)

        print("========== Hand 1 ==========")
        print_cards_addition("hand_1")

        ace_conversion("hand_1")
        
    elif hand == 2:
        rand_num = random.choice(available_cards)
        available_cards.remove(rand_num)
        hand_2[rand_num] = deck[rand_num]

        hand_2_value.append(string_to_int[hand_2[rand_num][0]])

        hand_2_format.clear()
        hand_2_display.clear()
        dealer_format.clear()
        dealers_display.clear()
        players_display_text.clear()
        player_format_text.clear()
        dealers_display_text.clear()
        dealer_format_text.clear()
        hand_2_display_text.clear()
        hand_2_format_text.clear()

        print_card(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
        print_card_text(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
        print_cards_blank()
        print_card_blank_text()
        
        for i in hand_2.keys():
            print_card(hand_2[i][0],hand_2[i][1],"hand_2")
            print_card_text(hand_2[i][0],hand_2[i][1],"hand_2")

        print("======= Dealer's Hand =======")
        print_cards_addition("dealer")

        time.sleep(0.5)

        print("========== Hand 2 ==========")
        print_cards_addition("hand_2")

        ace_conversion("hand_2")


#using hand_value_lists, the function iterate through the list and returns the sum of the elements
def total_player_or_dealer_card_value(player_or_dealer):
    total = 0
    if player_or_dealer == True:
        for i in player_hand_value:
            total += i
        return total
    elif player_or_dealer == False:
        for i in dealer_hand_value:
            total += i
        return total
    elif player_or_dealer == "hand_1":
        for i in hand_1_value:
            total += i
        return total
    elif player_or_dealer == "hand_2":
        for i in hand_2_value:
            total += i
        return total

#checks if the specific hand has an ace and if the player wants to convert it to a card with value 1. If the ace brings the total value of the hand over 21, the function automatically converts it a card valued 1.
def ace_conversion(hand):
    if hand == "player":
        #automatically converts the ace to a 1 if the value of the hand is over 21
        while total_player_or_dealer_card_value(True) > 21:
            for i in players_hand.keys():
                if players_hand[i][0] == "ace" and i not in converted_cards:
                    converted_cards.append(i)
                    player_hand_value[player_hand_value.index(11)] = 1
                    with open(file_name, "a") as file:
                        file.write("Your ace has been automatically converted into a 1 value card.\n")
                    break
            break
        #if the player's hand has an ace, it will ask if the player wants to convert it to 1 or keep it as 11. If the input is not yes or no, it will continuously ask for a new input.
        for i in players_hand.keys():
            if players_hand[i][0] == "ace" and i not in converted_cards:
                convert = input(slow_print("Would you like to keep the ace as card valued 11 or as a card valued 1?\n> ")).lower()
                if convert != "1" and convert != "11":
                    valid = False
                    while valid == False:
                        convert = input(slow_print("Sorry that is an invalid input.\nWould you like to keep the ace as card valued 11 or as a card valued 1?\n> ")).lower()
                        if convert != "1" and convert != "11":
                            continue
                        else:
                            break
                #changes the value of the ace in player's hand value to 1
                if convert == "1":
                    slow_print("Ok, that ace now has a value of 1.\n")
                    converted_cards.append(i)
                    player_hand_value[player_hand_value.index(11)] = 1
                    with open(file_name, "a") as file:
                        file.write("You have converted the ace to a 1 value card.\n")
                else:
                    slow_print("Ok, that ace still has a value of 11.\n")
                    converted_cards.append(i)
                    with open(file_name, "a") as file:
                        file.write("You chose to keep the ace as a card valued 11.\n")

    elif hand == "hand_1":
        while total_player_or_dealer_card_value("hand_1") > 21:
            for i in hand_1.keys():
                if hand_1[i][0] == "ace" and i not in hand_1_converted_cards:
                    hand_1_converted_cards.append(i)
                    hand_1_value[hand_1_value.index(11)] = 1
                    with open(file_name, "a") as file:
                        file.write("Your ace has been automatically converted into a 1 value card.\n")
                    break
            break
        
        for i in hand_1.keys():
            if hand_1[i][0] == "ace" and i not in hand_1_converted_cards:
                convert = input(slow_print("Would you like to keep the ace as card valued 11 or as a card valued 1?\n> ")).lower()
                if convert != "1" and convert != "11":
                    valid = False
                    while valid == False:
                        convert = input(slow_print("Sorry that is an invalid input.\nWould you like to keep the ace as card valued 11 or as a card valued 1?\n> ")).lower()
                        if convert != "1" and convert != "11":
                            continue
                        else:
                            break
                if convert == "1":
                    slow_print("Ok, that ace now has a value of 1.\n")
                    with open(file_name, "a") as file:
                        file.write("You have converted the ace to a 1 value card.\n")
                    hand_1_converted_cards.append(i)
                    hand_1_value[hand_1_value.index(11)] = 1
                else:
                    slow_print("Ok, that ace still has a value of 11.\n")
                    with open(file_name, "a") as file:
                        file.write("You chose to keep the ace as a card valued 11.\n")
                    hand_1_converted_cards.append(i)

    elif hand == "hand_2":
        while total_player_or_dealer_card_value("hand_2") > 21:
            for i in hand_2.keys():
                if hand_2[i][0] == "ace" and i not in hand_2_converted_cards:
                    hand_2_converted_cards.append(i)
                    hand_2_value[hand_2_value.index(11)] = 1
                    with open(file_name, "a") as file:
                        file.write("Your ace has been automatically converted into a 1 value card.\n")
                    break
            break

        for i in hand_2.keys():
            if hand_2[i][0] == "ace" and i not in hand_2_converted_cards:
                convert = input(slow_print("Would you like to keep the ace as card valued 11 or as a card valued 1?\n> ")).lower()
                if convert != "1" and convert != "11":
                    valid = False
                    while valid == False:
                        convert = input(slow_print("Sorry that is an invalid input.\nWould you like to keep the ace as card valued 11 or as a card valued 1?\n> ")).lower()
                        if convert != "1" and convert != "11":
                            continue
                        else:
                            break
                if convert == "1":
                    slow_print("Ok, that ace now has a value of 1.\n")
                    hand_2_converted_cards.append(i)
                    hand_2_value[hand_2_value.index(11)] = 1
                    with open(file_name, "a") as file:
                        file.write("You have converted the ace to a 1 value card.\n")
                else:
                    slow_print("Ok, that ace still has a value of 11.\n")
                    hand_2_converted_cards.append(i)
                    with open(file_name, "a") as file:
                        file.write("You chose to keep the ace as a card valued 11.\n")

#if the player takes insurance, the player can not double down, which is implemented using the if statement with can_double_down
#the function checks if the player's first two cards sum to 9 or 10 or 11 and if the player has enough money to double down. If yes, the function will double the bet and call the hit function
def double_down(can_double_down):
    if can_double_down:
        if total_player_or_dealer_card_value(True) in [9,10,11] and player["money"] >= round(player["bet"],2):
            action = input(slow_print("On this turn, you can choose to double the bet and double down. Are you confident in your chances?\n'yes' or 'no'\n> ")).lower()
            with open(file_name,"a") as file:
                file.write("On this turn you can double down.\n")
        else:
            action = "no"
        if action != "yes" and action != "no":
            valid = False
            while valid == False:
                action = input(slow_print("Sorry that is an invalid input. Would you like to double down?\n'yes' or 'no'\n> ")).lower()
                if action != "yes" and action != "no":
                    continue
                else:
                    break
        elif action == "yes":
            player["money"] += player["bet"]
            player["bet"] =  round(player["bet"],2) * 2
            player["money"] -= player["bet"]
            slow_print("You have doubled down and the bet is now " + str( round(player["bet"],2)) + " dollars.\n")
            with open(file_name,"a") as file:
                file.write("You have choosen to double down and your total bet is " + str(round(player["bet"],2)) + " dollars\n")
            hit("player")
            global continue_round
            continue_round = False
            dealer_actions("player")
            
            #player can only hit once during a double down. Checks if the player wins or the dealer wins or if it is a draw. Then prints the result to the terminal and the player profile file
            time.sleep(1)
            if total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) > total_player_or_dealer_card_value(True):
                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "The dealer wins.\n")
                with open(file_name,"a") as file:
                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "The dealer wins.\n")
            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) < total_player_or_dealer_card_value(True):
                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "You win!!\n")
                player["winnings"] = round(player["bet"],2) + round(player["bet"]*1.2,2)
                player["money"] += player["winnings"]
                slow_print("Congratulations you have won " + str(player["winnings"]) + " dollars!\n")
                with open(file_name,"a") as file:
                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "You win!!\n")
                    file.write("You have won " + str(player["winnings"]) + " dollars!\n")
            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) == total_player_or_dealer_card_value(True):
                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "This round is a draw.\n")
                slow_print("Your bet has been returned to you.")
                player["money"] +=  round(player["bet"],2)
                with open(file_name,"a") as file:
                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "This round is a draw.\n")
            elif total_player_or_dealer_card_value(False) > 21:
                slow_print("The dealer busts.\nYou win!!\n")
                player["winnings"] = round(player["bet"],2) + round(player["bet"]*1.2,2)
                player["money"] += player["winnings"]
                slow_print("Congratulations you have won " + str(player["winnings"]) + " dollars!\n")
                with open(file_name,"a") as file:
                    file.write("The dealer busts. You have won " + str(player["winnings"]) + " dollars!\n")

#sets can_double_down as initally True and changes if the player calls insurance 
can_double_down = True

#if the dealer's first card is an ace, the play can a make an insurance bet that the dealer's next card is a ten valued card
#function checks if the dealer's first card is an ace and if the player can call insurance. If the player calls insurance and the next card is a ten valued card, the player breaks even. If next card is not a ten valued card, the player loses the bet. 
def insurance():
    #checks if the dealer's first card is an ace and if the player has enough money to call insurance
    if dealers_hand[list(dealers_hand.keys())[0]][0] == "ace" and player["money"] >= round(player["bet"]*0.5,2):    
        action = input(slow_print("On this turn, the dealer's first card is an ace, you can choose to call insurance.\n'yes' or 'no'\n> ")).lower()
        with open(file_name,"a") as file:
            file.write("On this turn you can call insurance.\n")
    else:
        action = "no"
    if action != "yes" and action != "no":
        valid = False
        while valid == False:
            action = input(slow_print("Sorry that is an invalid input. What would you like to call insurance?\n'yes' or 'no'\n> ")).lower()
            if action != "yes" and action != "no":
                continue
            else:
                break    
    elif action == "yes":
        player["money"] -= round(player["bet"] * 0.5,2)
        slow_print("You have called insurance and placed an insurance bet of " + str(round(player["bet"]*0.5,2)) + " dollars.\n")
        global can_double_down
        can_double_down = False

        with open(file_name,"a") as file:
            file.write("You have called insurance and placed a side bet of " + str(round(player["bet"]*0.5,2)) + " dollars.\n")
        #calls total_player_or_dealer_value(False) to check if the dealer's first two cards add to 21 and is a blackjack
        if total_player_or_dealer_card_value(False) == 21:
            print_current_card_state("player",True)
            slow_print("Your insurance call has paided off!\nYour main bet will be returned to you.\n")
            with open(file_name,"a") as file:
                file.write("Your insurance call has paid off and your main bet has been returned to you.\n")
            player["money"] += round(player["bet"],2)
            #begins a new round
            global continue_round
            continue_round = False            
        else:
            slow_print("Your insurance call was incorrect!\n")
            with open(file_name,"a") as file:
                file.write("The insurance call was incorrect and you lost " + str(round(player["bet"]*0.5,2)) + " dollars.\n")

#dictionaries used to store hand 1 and hand 2 cards
hand_1 = {}
hand_2 = {}

#if the player's first two cards have the same number (eg. (5,5),(10,10),(king,king)) the player can split the hand into two hands and play them separately 
def split_hand():
    cards_index = list(players_hand.keys())

    #sets can_split as initally False
    can_split = False
    action = ""

    #checks if the player's cards have the same number and if the player has enough money to split 
    if players_hand[cards_index[0]][0] == players_hand[cards_index[1]][0] and player["money"] >= round(player["bet"],2):
        #sets can split to True
        can_split = True
    
    if can_split:
        action = input(slow_print("Would you like to split your hand?\n'Yes' or 'No'\n> ")).lower()
        if action != "yes" and action != "no":
            valid = False
            while valid == False:
                action = input(slow_print("Would you like to split your hand?\n'Yes' or 'No'\n> ")).lower()
                if action != "yes" and action != "no":
                    continue
                else:
                    break
    #used to break out or stay in the main game loop and initiate or skip over the game loop for split hands  
    global split_accepted
    split_accepted = False

    if action == "yes":
        slow_print("Alright your hand has been split into 'Hand 1' and 'Hand 2'. Both hands have a bet of " + str(round(player["bet"],2)) + " dollars.\n")
        player["money"] -= round(player["bet"],2)

        #breaks out the main game loop and start the split hand game loop
        split_accepted = True
        
        #adds the main hand's first card to hand 1 and the second card to hand 2
        hand_1[cards_index[0]] = players_hand[cards_index[0]]
        hand_1_value.append(string_to_int[players_hand[cards_index[0]][0]])
        hand_2[cards_index[1]] = players_hand[cards_index[1]]
        hand_2_value.append(string_to_int[players_hand[cards_index[1]][0]])
        
        slow_print("Playing Hand 1.\n")

        with open(file_name,"a") as file:
            file.write("You have choosen to split your hand.\n")

#function asks the player for an input to stand(holds the player's total and ends turn) or hit(deals another card) 
#if the input is invalid, the function continuously asks for a new input, until it recieves a valid input 
def player_action(current_hand):
    action = input(slow_print("What would you like to do?\n'Hit' or 'Stand'\n> ")).lower()
    if action != "hit" and action != "stand":
        valid = False
        while valid == False:
            action = input(slow_print("Invalid input. What would you like to do?\n'Hit' or 'Stand'\n> ")).lower()
            if action != "hit" and action != "stand":
                continue
            else:
                break

    #calls the hit function
    if action == "hit":
        slow_print("You choose to hit.\n")
        with open(file_name, "a") as file:
            file.write("You chose to hit.\n")
        hit(current_hand)  
        
    elif action == "stand":
        slow_print("You choose to stand.\n")
        with open(file_name, "a") as file:
            file.write("You chose to stand.\n")
        if split_round == False:
            slow_print("It is now the dealer's turn.\n")

        #used to end the player's turn and begin the dealer's turn 
        global not_stand
        not_stand = False

#lists used to store generated cards from print_card(), print_card_text(), print_cards_blank(), print_cards_blank_text(), print_cards_split()
players_display_text = []
player_format_text = []
dealers_display_text = []
dealer_format_text = []
hand_1_display_text = []
hand_1_format_text = []
hand_2_display_text = []
hand_2_format_text = []

#prints a icon of each card to the terminal 
def print_card(pips, suit, player_or_dealer):
    suit_icons = {"diamonds":'♦', "clubs":'♣', "hearts":'♥', "spades":'♠'}
    pips_to_symbol = {"two":"2","three":"3","four":"4","five":"5","six":"6","seven":"7","eight":"8","nine":"9","ten":"10","jack":"J","queen":"Q","king":"K","ace":"A"}
    
    lines = [[] for x in range(7)]
    
    #blank used to format values that take up two spaces
    if pips_to_symbol[pips] == "10":
        blank = ""
    else:
        blank = " "
    lines[0].append('┌─────────┐')
    lines[1].append('│{}{}       │'.format(str(pips_to_symbol[pips]), blank))
    lines[2].append('│         │')
    lines[3].append('│    {}    │'.format(suit_icons[suit]))
    lines[4].append('│         │')
    lines[5].append('│       {}{}│'.format(blank, str(pips_to_symbol[pips])))
    lines[6].append('└─────────┘')

    #joins the lines of each card into a single list 
    card = ["".join(line) for line in lines]

    #lists used in print_cards_addition()
    if player_or_dealer == True:
        players_display.append(card)
        format.append(card)
    elif player_or_dealer == False:
        dealers_display.append(card)
        dealer_format.append(card)
    elif player_or_dealer == "hand_1":
        hand_1_display.append(card)
        hand_1_format.append(card)
    elif player_or_dealer == "hand_2":
        hand_2_display.append(card)
        hand_2_format.append(card)

#same function as print_card, but formatting of cards modified to be appended on player's profile file
def print_card_text(pips, suit, player_or_dealer):
    suit_icons = {"diamonds":'♦', "clubs":'♣', "hearts":'♥', "spades":'♠'}
    pips_to_symbol = {"two":"2","three":"3","four":"4","five":"5","six":"6","seven":"7","eight":"8","nine":"9","ten":"10","jack":"J","queen":"Q","king":"K","ace":"A"}
    lines = [[] for x in range(7)]

    if pips_to_symbol[pips] == "10":
        blank = ""
    else:
        blank = " "
    lines[0].append('┌───────┐')
    lines[1].append('│{}{}       │'.format(str(pips_to_symbol[pips]), blank))
    lines[2].append('│         │')
    lines[3].append('│    {}    │'.format(suit_icons[suit]))
    lines[4].append('│         │')
    lines[5].append('│       {}{}│'.format(blank, str(pips_to_symbol[pips])))
    lines[6].append('└───────┘')

    card = ["".join(line) for line in lines]

    #listed used in print_card_addition_text()
    if player_or_dealer == True:
        players_display_text.append(card)
        player_format_text.append(card)
    elif player_or_dealer == False:
        dealers_display_text.append(card)
        dealer_format_text.append(card)
    elif player_or_dealer == "hand_1":
        hand_1_display_text.append(card)
        hand_1_format_text.append(card)
    elif player_or_dealer == "hand_2":
        hand_2_display_text.append(card)
        hand_2_format_text.append(card)

#depending on the hand, function joins the individual rows (eg. card 1 top with card 2 top and ccard 1 middle with card 2 middle) of each card into a single string. Then iterates through and prints the card into the terminal and player profile file
def print_cards_addition(target):
    if target == "player":
        for i in range(7):
            for x in range(1,len(players_display)):
                format[0][i] = format[0][i] + "      " + players_display[x][i]
        for i in format[0]:
            print(i)

        for i in range(7):
            for x in range(1,len(players_display_text)):
                player_format_text[0][i] = player_format_text[0][i] + "      " + players_display_text[x][i]
        #using encoding = "utf-8" due to cards have non-standard characters. (eg. ♣,♥,─, ┐)
        with open(file_name,"a", encoding = "utf-8") as file:
            file.write("\n")
            file.write("========= Your Hand =========\n")
            file.write("\n".join(player_format_text[0]))
            file.write("\n")

        
    elif target == "dealer":
        for i in range(7):
            for x in range(1,len(dealers_display)):
                dealer_format[0][i] = dealer_format[0][i] + "      " + dealers_display[x][i]
        for i in dealer_format[0]:
            print(i)

        for i in range(7):
            for x in range(1,len(dealers_display_text)):
                dealer_format_text[0][i] = dealer_format_text[0][i] + "      " + dealers_display_text[x][i]

        with open(file_name,"a", encoding = "utf-8") as file:
            file.write("\n")
            file.write("======= Dealer's Hand =======\n")
            file.write("\n".join(dealer_format_text[0]))
            file.write("\n")
        
    elif target == "hand_1":
        for i in range(7):
            for x in range(1,len(hand_1_display)):
                hand_1_format[0][i] = hand_1_format[0][i] + "      " + hand_1_display[x][i]
        for i in hand_1_format[0]:
            print(i)

        for i in range(7):
            for x in range(1,len(hand_1_display_text)):
                hand_1_format_text[0][i] = hand_1_format_text[0][i] + "      " + hand_1_display_text[x][i]

        with open(file_name,"a", encoding = "utf-8") as file:
            file.write("\n")
            file.write("========== Hand 1 ==========\n")
            file.write("\n".join(hand_1_format_text[0]))
            file.write("\n")
        
    elif target == "hand_2":
        for i in range(7):
            for x in range(1,len(hand_2_display)):
                hand_2_format[0][i] = hand_2_format[0][i] + "      " + hand_2_display[x][i]
        for i in hand_2_format[0]:
            print(i)

        for i in range(7):
            for x in range(1,len(hand_2_display_text)):
                hand_2_format_text[0][i] = hand_2_format_text[0][i] + "      " + hand_2_display_text[x][i]

        with open(file_name,"a", encoding = "utf-8") as file:
            file.write("\n")
            file.write("========== Hand 2 ==========\n")
            file.write("\n".join(hand_2_format_text[0]))
            file.write("\n")
        
#function used to join the individual rows of each card of both hand 1 and hand 2 into a single list 
def print_cards_split():
    for i in range(7):
        for x in range(1,len(hand_1_display)):
            hand_1_format[0][i] = hand_1_format[0][i] + "      " + hand_1_display[x][i]

    for i in range(7):
        hand_1_format[0][i] = hand_1_format[0][i] + "      ||" 
    for i in range(7):
        for x in range(len(hand_2_display)):
            hand_1_format[0][i] = hand_1_format[0][i] + "      " + hand_2_display[x][i]

    blank = " " * (len(hand_1_format[0][0])//4)

    print("========= Hand 1 =========" + blank + "========= Hand 2 =========")
    
    for i in hand_1_format[0]:
        print(i)

    #joins all cards of hand 1
    for i in range(7):
        for x in range(1,len(hand_1_display_text)):
            hand_1_format_text[0][i] = hand_1_format_text[0][i] + "      " + hand_1_display_text[x][i]
    
    #adds a the spacing(      ||) into each row of the card
    for i in range(7):
        hand_1_format_text[0][i] = hand_1_format_text[0][i] + "      ||" 
    
    #joins the individual rows of hand 2 to to hand 1 cards
    for i in range(7):
        for x in range(len(hand_2_display_text)):
            hand_1_format_text[0][i] = hand_1_format_text[0][i] + "      " + hand_2_display_text[x][i]
    
#creates a blank/flipped over card for the dealer
def print_cards_blank():
    lines = [[] for x in range(7)]
    lines[0].append('┌─────────┐')
    lines[1].append('│╱╱╱╱╱╱╱╱╱│')
    lines[2].append('│╱╱╱╱╱╱╱╱╱│')
    lines[3].append('│╱╱╱╱╱╱╱╱╱│')
    lines[4].append('│╱╱╱╱╱╱╱╱╱│')
    lines[5].append('│╱╱╱╱╱╱╱╱╱│')
    lines[6].append('└─────────┘')

    card = ["".join(line) for line in lines]
    dealers_display.append(card)
    dealer_format.append(card)

#same as print_cards_blank, but formats the card to be appended to player profile file
def print_card_blank_text():
    lines = [[] for x in range(7)]
    lines[0].append('┌───────┐')
    lines[1].append('│╱╱╱╱╱╱╱╱╱│')
    lines[2].append('│╱╱╱╱╱╱╱╱╱│')
    lines[3].append('│╱╱╱╱╱╱╱╱╱│')
    lines[4].append('│╱╱╱╱╱╱╱╱╱│')
    lines[5].append('│╱╱╱╱╱╱╱╱╱│')
    lines[6].append('└───────┘')

    card = ["".join(line) for line in lines]
    dealers_display_text.append(card)
    dealer_format_text.append(card)

#adds a card to dealer's hand
def dealer_hit():
    rand_num = random.choice(available_cards)
    #once the card has been dealt, it's key is removed from avaliable cards so it can not be drawn twice with the same deck
    available_cards.remove(rand_num)
    dealers_hand[rand_num] = deck[rand_num]
    
    #appends the value of the card to dealer_hand_value list
    dealer_hand_value.append(string_to_int[dealers_hand[rand_num][0]])

#checks if the dealer has an ace that brings the total hand to over 21 and converts it automatically to a card valued 1.
#if the ace brings the total to 17 or greater but less than 21, the dealer's ace will not be converted
def dealer_ace_conversion():
    if total_player_or_dealer_card_value(False) >= 17 and total_player_or_dealer_card_value(False) < 21:
        return ""
    elif total_player_or_dealer_card_value(False) > 21:
        while total_player_or_dealer_card_value(False) > 21:
            for i in dealers_hand.keys():
                if dealers_hand[i][0] == "ace" and i not in dealer_converted_cards:
                    dealer_converted_cards.append(i)
                    dealer_hand_value[dealer_hand_value.index(11)] = 1
                    break
            break
    #if the dealer has an ace but it does not bring the total to 17 or greater, the dealer will randomly choose to convert the ace or not to
    else:
        rand_choice = random.choice([1,2])
        if rand_choice == 1:
            for i in dealers_hand.keys():
                #if the ace has not been converted, it changes the ace in dealer_hand_value to 1
                if dealers_hand[i][0] == "ace" and i not in dealer_converted_cards:
                    dealer_converted_cards.append(i)
                    dealer_hand_value[dealer_hand_value.index(11)] = 1

#prints the currents cards of the player and dealer to the terminal. If it is the dealer's turn, the dealer's face down card will be printed face up         
def print_current_card_state(target,dealer_turn):
    #clears previous cards
    dealers_display.clear()
    dealer_format.clear()
    dealer_format_text.clear()
    dealers_display_text.clear()

    if target == "player":
        #dealer_turn == True will print all dealer's cards face up
        if dealer_turn == True:
            #clears previous player cards 
            format.clear()
            players_display.clear()
            players_display_text.clear()
            player_format_text.clear()

            #generates and prints cards in dealer's hand and player's hand
            for i in dealers_hand.keys():
                print_card(dealers_hand[i][0],dealers_hand[i][1],False)
                print_card_text(dealers_hand[i][0],dealers_hand[i][1],False)

            for i in players_hand.keys():
                print_card(players_hand[i][0],players_hand[i][1],True)
                print_card_text(players_hand[i][0],players_hand[i][1],True)

            print("======= Dealer's Hand =======")
            print_cards_addition("dealer")

            time.sleep(0.5)

            print("========= Your Hand =========")
            print_cards_addition("player")
        
    elif target == "hand_1":
        #dealer_turn == False will keep dealer's second card face down 
        if dealer_turn == False:
            hand_1_display.clear()
            hand_1_format.clear()
            hand_1_display_text.clear()
            hand_1_format_text.clear()

            print_card(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
            print_card_text(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
            print_cards_blank()
            print_card_blank_text()

            for i in hand_1.keys():
                print_card(hand_1[i][0],hand_1[i][1],"hand_1")
                print_card_text(hand_1[i][0],hand_1[i][1],"hand_1")

            print("======= Dealer's Hand =======")
            print_cards_addition("dealer")

            time.sleep(0.5)

            print("========== Hand 1 ==========")
            print_cards_addition("hand_1")

        elif dealer_turn == True:
            hand_1_display.clear()
            hand_1_format.clear()
            hand_1_display_text.clear()
            hand_1_format_text.clear()

            for i in dealers_hand.keys():
                print_card(dealers_hand[i][0],dealers_hand[i][1],False)
                print_card_text(dealers_hand[i][0],dealers_hand[i][1],False)

            for i in hand_1.keys():
                print_card(hand_1[i][0],hand_1[i][1],"hand_1")
                print_card_text(hand_1[i][0],hand_1[i][1],"hand_1")

            print("======= Dealer's Hand =======")
            print_cards_addition("dealer")

            time.sleep(0.5)

            print("========== Hand 1 ==========")
            print_cards_addition("hand_1")
  
    elif target == "hand_2":
        if dealer_turn == False:
            hand_2_display.clear()
            hand_2_format.clear()
            hand_2_display_text.clear()
            hand_2_format_text.clear()

            print_card(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
            print_card_text(dealers_hand[list(dealers_hand.keys())[0]][0],dealers_hand[list(dealers_hand.keys())[0]][1],False)
            print_cards_blank()
            print_card_blank_text()
            for i in hand_2.keys():
                print_card(hand_2[i][0],hand_2[i][1],"hand_2")
                print_card_text(hand_2[i][0],hand_2[i][1],"hand_2")

            print("======= Dealer's Hand =======")
            print_cards_addition("dealer")

            time.sleep(0.5)

            print("========== Hand 2 ==========")
            print_cards_addition("hand_2")

        elif dealer_turn == True:
            hand_2_display.clear()
            hand_2_format.clear()
            hand_2_display_text.clear()
            hand_2_format_text.clear()

            for i in dealers_hand.keys():
                print_card(dealers_hand[i][0],dealers_hand[i][1],False)
                print_card_text(dealers_hand[i][0],dealers_hand[i][1],False)
                
            for i in hand_2.keys():
                print_card(hand_2[i][0],hand_2[i][1],"hand_2")
                print_card_text(hand_2[i][0],hand_2[i][1],"hand_2")

            print("======= Dealer's Hand =======")
            print_cards_addition("dealer")

            time.sleep(0.5)

            print("========== Hand 2 ==========")
            print_cards_addition("hand_2")

    elif target == "split":
        #clears previous cards 
        hand_1_format.clear()
        hand_1_display.clear()
        hand_2_display.clear()
        hand_2_format.clear()
        hand_1_display_text.clear()
        hand_1_format_text.clear()
        hand_2_display_text.clear()
        hand_2_format_text.clear()

        #generates cards for hand 1 and hand 2
        for i in hand_1.keys():
            print_card(hand_1[i][0],hand_1[i][1],"hand_1")
            print_card_text(hand_1[i][0],hand_1[i][1],"hand_1")
        for i in hand_2.keys():
            print_card(hand_2[i][0],hand_2[i][1],"hand_2")
            print_card_text(hand_2[i][0],hand_2[i][1],"hand_2")
        
        #joins the individual rows of each card in hand 1
        for i in range(7):
            for x in range(1,len(hand_1_display)):
                hand_1_format[0][i] = hand_1_format[0][i] + "      " + hand_1_display[x][i]

        #calculates a spacing between the titles for the two hands based on the number of cards present in hand 1
        length_hand_1 = len(hand_1_format[0][0])
        blank = " " * (length_hand_1 - 12)

        #adds the spacing (      ||) to the individual rows of each card in hand 1
        for i in range(7):
            hand_1_format[0][i] = hand_1_format[0][i] + "      ||" 

        #adds the individual rows of each card in hand 2 to the rows in hand 1
        for i in range(7):
            for x in range(len(hand_2_display)):
                hand_1_format[0][i] = hand_1_format[0][i] + "      " + hand_2_display[x][i]

        #iterates through the dealer's hand and generates the cards for the dealer
        for i in dealers_hand.keys():
            print_card(dealers_hand[i][0],dealers_hand[i][1],False)
            print_card_text(dealers_hand[i][0],dealers_hand[i][1],False)

        print("======= Dealer's Hand =======")
        print_cards_addition("dealer")

        time.sleep(0.5)

        #prints the banner for hand 1 and hand 2
        #if there are less than 2 cards in hand 1, short banners will be used for both hands
        if length_hand_1 < 17:
            blank = " " * (length_hand_1 - 4)
            print("===== Hand 1 =====" + blank + "===== Hand 2 =====")
            file_write = "===== Hand 1 =====" + blank + "===== Hand 2 ====="
        else:
            print("========= Hand 1 =========" + blank + "========= Hand 2 =========")
            file_write = "========= Hand 1 =========" + blank + "========= Hand 2 ========="

        for i in hand_1_format[0]:
            print(i)

        #appends the banners for hand 1, hand 2, and dealer and the cards onto player profile file 
        with open(file_name,"a") as file:
            file.write("======= Dealer's Hand =======\n")
            file.write("\n".join(dealer_format_text[0]))
            file.write(file_write + "\n")
            file.write("\n".join(hand_1_format_text[0]))

#based on what hand the function is called on (player, hand 1, hand 2, split), the function calls on dealer_ace_conversion(), dealer_hit(), print_current_card_state()
#dealer_ace_conversion() always called first to avoid the dealer busting with two aces as first cards
def dealer_actions(hand):
    #checks if dealer needs to convert aces to card valued 1 or keep as card valued 11
    dealer_ace_conversion()
    if hand == "player":
        #prints the all cards (player's and dealer's) with dealer's cards all face up
        print_current_card_state("player",True)
        #keeps hitting until the total is greater or equal to 16
        while total_player_or_dealer_card_value(False) <= 16:
            dealer_hit()
            dealer_ace_conversion()
            #prints the updated cards with the card the dealer gained from hitting
            print_current_card_state("player",True)        
            time.sleep(2)
    elif hand == "hand_1":
        print_current_card_state("hand_1",True)
        while total_player_or_dealer_card_value(False) <= 16:
            dealer_hit()
            dealer_ace_conversion()
            print_current_card_state("hand_1",True)        
            time.sleep(2)
    elif hand == "hand_2":
        print_current_card_state("hand_2",True)
        while total_player_or_dealer_card_value(False) <= 16:
            dealer_hit()
            dealer_ace_conversion()
            print_current_card_state("hand_2",True) 
            time.sleep(2)
    elif hand == "split":
        print_current_card_state("split",True)
        while total_player_or_dealer_card_value(False) <= 16:
            dealer_hit()
            dealer_ace_conversion()
            print_current_card_state("split",True)
            time.sleep(2)

#checks if the first two cards cards result in a blackjack by iterating through the player's or dealer's hand and returning True or False
def is_blackjack(player_or_dealer):
    sum = 0
    if player_or_dealer:
        for i in players_hand.keys():
            value = string_to_int[players_hand[i][0]]
            sum += value
    else:
        for i in dealers_hand.keys():
            value = string_to_int[dealers_hand[i][0]]
            sum += value
    if sum == 21:
        return True
    else:
        return False 

#clears all lists used to generate and format cards to prepare for the next round
def clean_up():
    players_hand.clear()
    dealers_hand.clear()
    format.clear()
    dealer_format.clear()
    players_display.clear()
    dealers_display.clear()
    player_hand_value.clear()
    dealer_hand_value.clear()
    converted_cards.clear()
    dealer_converted_cards.clear()
    hand_1_display.clear()
    hand_1_format.clear()
    hand_2_display.clear()
    hand_2_format.clear()
    hand_1_converted_cards.clear()
    hand_2_converted_cards.clear()
    hand_1_value.clear()
    hand_2_value.clear()
    players_display_text.clear()
    player_format_text.clear()
    dealers_display_text.clear()
    dealer_format_text.clear()
    hand_1_display_text.clear()
    hand_1_format_text.clear()
    hand_2_display_text.clear()
    hand_2_format_text.clear()

#MAIN GAMELOOP
while play_game:
    #cards that are avaliable to be dealt 
    available_cards = [x for x in range(0,52)]

    #reading from a text file (blackjack_introduction.txt), the rules of blackjack will be printed into the terminal 
    action = input(slow_print("Before the game begins, would you like to review the rules?\n'yes' or 'no'\n> ")).lower()
    if action != "yes" and action != "no":
        valid = False
        while valid == False:
            action = input(slow_print("Invalid input. Would you like to review the rules?\n'yes' or 'no'\n> ")).lower()
            if action != "yes" and action != "no":
                continue
            else:
                break
    
    if action == "yes":
        #tries to open and read from backjack_introduction.txt and if the file is not found, an exception will be printed
        try:
            instructions = open("blackjack_introduction.txt", encoding = 'utf-8-sig')
            print(instructions.read())
        except:
            print("blackjack_introduction.txt is missing.")

    slow_print("\nWelcome to BLACKJACK!\nFor this table the minimum bet is 5 dollars.\n") 
    ready_to_play = input(slow_print("Would you like to play?\n'yes' or 'no'\n> ")).lower()
    if "yes" != ready_to_play and "no" != ready_to_play :
        valid = False
        while valid == False:
            ready_to_play = input(slow_print("Sorry that is not a valid input. Please input 'yes' or 'no'\n> ")).lower()
            if "yes" != ready_to_play and "no" != ready_to_play:
                continue
            else:
                play_blackjack = True
                break
    #starts the blackjack game
    elif ready_to_play == "yes":
        play_blackjack = True
    
    #ends the program
    elif ready_to_play == "no":
        play_blackjack = False
        play_game = False
        break

    #set up file and player's profile
    name = input(slow_print("Please enter your name:\n> "))
    file_name = "cps109_a1_output.txt"
    current_time = datetime.now()
    time_stamp = current_time.strftime("%d/%m/%Y %H:%M:%S")

    #if the file player's_name_profile.txt does not exis, a new text file will be created 
    if not os.path.isfile(file_name):
        player_profile = open(file_name,"w") 

    #appends the player's name and intially money to the text file
    lines = ["Player: " + name,name + "'s Money: " + str(player["money"])]

    if os.path.getsize(file_name) == 0:
        with open(file_name,"a") as file:
            file.write("Session date and time: " + time_stamp + "\n")
            file.write("\n".join(lines))
    else:
        with open(file_name,"a") as file:
            file.write("\n\n\n" + "Session date and time: " + time_stamp + "\n")
            file.write("\n".join(lines))

    #blackjack game loop
    while play_blackjack:
        #updates the player on current money and round number
        slow_print("Alright, let us begin round " + str(player["round"])+"\n")
        slow_print("You currently have " + str(round(player["money"],2)) + " dollars.\n")

        #if there are not enough cards for a full round of blackjack, a new deck will be generated (refresh available_cards, but keep the old cards as well)
        if len(available_cards) < 20:
            slow_print("The cards are running out. A new deck has been shuffled in.\n")
            with open(file_name,"a") as file:
                file.write("A new deck has been shuffled in.")
            available_cards = [x for x in range(0,52)]

        player_bet = (input(slow_print("Place a bet: \n> ")))

        #checks if player_bet is a number and valid bet(less than player's money and greater or equal to table minimum)
        is_number(player_bet)

        player_bet = float(player_bet)
        if player_bet < 5 or player_bet > player["money"]:
            valid = False
            while valid == False:
                if float(player_bet) < 5:
                    valid = False
                    while valid == False:
                        slow_print("Sorry that is not a valid bet. Please place a bet above the table minimum.\n")
                        player_bet = input(slow_print("You currently have " + str(round(player["money"],2)) + " dollars.\nPlace a bet: \n> "))
                        is_number(player_bet)
                        if float(player_bet) < 5:
                            continue
                        else:
                            break

                if float(player_bet) > player["money"]:
                    valid = False
                    while valid == False:
                        slow_print("Sorry that is not a valid bet. Please place a bet within the money you possess.\n")
                        player_bet = input(slow_print("You currently have " + str(round(player["money"],2)) + " dollars.\nPlace a bet: \n> "))
                        is_number(player_bet)
                        if float(player_bet) > player["money"]:
                            continue
                        else:
                            break
               
                if float(player_bet) <= player["money"] and float(player_bet) >= 5 and is_number(player_bet):
                    break

        slow_print("You have placed a bet of " + str(round(float(player_bet),2)) + " dollars.\nDealing the first hand.\n")
        player["bet"] = float(player_bet)
        player["money"] -= round(player["bet"],2)

        #updates player's profile file with current round's bet and player's money
        with open(file_name,"a") as file:
            file.write("\n\nRound " + str(player["round"]) + ":\n")
            file.write("Current money: " + str(round(player["money"],2)) + " dollars\n")
            file.write("Bet placed: " + str(round(player["bet"],2)) + " dollars\n")

        #deals the first hand, two cards to the dealer (one face up and one face down) and two cards to the player
        first_deal()
        
        #checks if the player's first two cards sum to 21
        if is_blackjack(True) == True:
            slow_print("BLACKJACK!!\n")
            print_current_card_state("player",True)

            #if the dealer also has a blackjack, then it is a draw and a new round begins
            if is_blackjack(False):
                slow_print("Unfortunately both you and the dealer have a blackjack. This turn ends in a draw. Your bet will be returned to you.\n")
                player["money"] += round(player["bet"],2)
                player["round"] += 1
                with open(file_name,"a") as file:
                    file.write("You got a backjack, but unfortunately the dealer also had a blackjack.\n")

            else:
                player["winnings"] = round(player["bet"],2) + round(player["bet"]*1.5,2)
                slow_print("Congrutlations, you win!\nYou have recieved " + str(player["winnings"]) + " dollars!\n")
                player["money"] += player["winnings"]
                player["round"] += 1
                with open(file_name,"a") as file:
                    file.write("You got a backjack and won the round.\n")
                    file.write("You have won " + str(player["winnings"]) + " dollars!\n")
            #clears all lists used to generate cards in preperation for the next round
            clean_up()

            #asks the player if they want to continue playing or would like to quit
            continue_play = input(slow_print("Would you like to continue?\n'yes' or 'no'\n> ")).lower()
            if "yes" != continue_play and "no" != continue_play:
                valid = False
                while valid == False:
                    continue_play = input(slow_print("Sorry that is not a valid input. Please input 'yes' or 'no'\n> ")).lower()
                    if "yes" != continue_play and "no" != continue_play:
                        continue
                    else:
                        break
            #continues the game 
            elif continue_play == "yes":
                continue
            #ends the game 
            elif continue_play == "no":
                break
        
        #checks if the player can or wants to call insurance 
        insurance()
        
        #checks if the player can or wants to split their hand 
        split_hand()

        #continue round set as True and used to continue the round in the main loop and the split hand loop 
        #Can be set to False if the player double downs or wins the insurance bet
        continue_round = True

        #split_round intitally set as False and can be changed if the play accepts to split their hand 
        split_round = False

        #split hand game loop
        #split_accpeted set as True from split_hand() if the player accepts to split their hand 
        if split_accepted and continue_round:
            current_hand = 1

            #used by player_action()
            not_stand = True

            split_round = True
            for i in range(2):
                if current_hand == 1:
                    #updates the terminal with the cards from the dealer's hand and hand 1 only
                    print_current_card_state("hand_1",False)

                    #player_action() called until the total of hand 1 goes above 21 or the player chooses to stand 
                    while total_player_or_dealer_card_value("hand_1") <= 21 and not_stand:
                        player_action(1)

                    #sets not_stand to True for hand 2
                    not_stand = True

                    #checks if the player's total is greater than 21 and the player busts
                    if total_player_or_dealer_card_value("hand_1") > 21:
                        time.sleep(0.5)
                        slow_print("Your current hand has bust and the dealer wins this hand.\nPlaying the second hand now.\n")
                        with open(file_name,"a") as file:
                            file.write("You have busted your first hands and the dealer wins this hand\n")
                
                elif current_hand == 2:
                    #updates the terminal with the cards from dealer's hand and hand 2 only
                    print_current_card_state("hand_2",False)

                    #while the total of hand 2 is less than 21, the player can choose to hit or stand 
                    while total_player_or_dealer_card_value("hand_2") <= 21 and not_stand:
                        player_action(2)
                    
                    #checks if the total of hand 2 is greater than 21 and if the player busts
                    if total_player_or_dealer_card_value("hand_2") > 21:
                        time.sleep(0.5)
                        slow_print("Your second hand has bust and the dealer wins this hand.\n")
                        with open(file_name,"a") as file:
                            file.write("You have busted your second hand and the dealer wins this hand\n")

                    #checks if both hand 1 and hand 2 bust
                    if total_player_or_dealer_card_value("hand_1") > 21 and total_player_or_dealer_card_value("hand_2") > 21:
                        slow_print("Both of your hands have bust. The dealer wins both hands.\n")
                        with open(file_name,"a") as file:
                            file.write("You have busted both hands. The dealer wins both hands\n")
                        
                    else:
                        #hand 1 busts and dealer_actions() is only called for hand 2
                        if total_player_or_dealer_card_value("hand_1") > 21:
                            dealer_actions("hand_2")
                        #hand 2 busts and dealer actions() is only called for hand 1
                        elif total_player_or_dealer_card_value("hand_2") > 21:
                            dealer_actions("hand_1")
                        #none of the hands busts and dealer_actions() is called for both hands (split)
                        else:
                            dealer_actions("split")

                        time.sleep(0.5)

                        #all outcomes if hand 1 does not bust 
                        if total_player_or_dealer_card_value("hand_1") <= 21 and total_player_or_dealer_card_value(False) <= 21:
                            if total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) > total_player_or_dealer_card_value("hand_1") and total_player_or_dealer_card_value(False) > total_player_or_dealer_card_value("hand_2"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "The dealer wins both hands.\n")
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "The dealer wins both hands.\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) < total_player_or_dealer_card_value("hand_1") and total_player_or_dealer_card_value(False) > total_player_or_dealer_card_value("hand_2"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You win the first hand, but the dealer wins the second hand.\n")
                                player["winnings"] = round(player["bet"],2) + round(player["bet"]*1.2,2)
                                player["money"] += player["winnings"]
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You win the first hand, but the dealer wins the second hand.\n")
                                    file.write("You have won " + str(player["winnings"] + " dollars!\n"))
                                slow_print("You have won " + str(player["winnings"]) + " dollars!\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) > total_player_or_dealer_card_value("hand_1") and total_player_or_dealer_card_value(False) < total_player_or_dealer_card_value("hand_2"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "The dealer wins the first hand, but you win the second hand.\n")
                                player["winnings"] = round(player["bet"],2) + round(player["bet"]*1.2,2)
                                player["money"] += player["winnings"]
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "The dealer wins the first hand, but you win the second hand.\n")
                                    file.write("You have won " + str(player["winnings"]) + "dollars.\n")
                                slow_print("You have won " + str(player["winnings"]) + "dollars.\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) < total_player_or_dealer_card_value("hand_1") and total_player_or_dealer_card_value(False) < total_player_or_dealer_card_value("hand_2"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You win both hands!\n")
                                player["winnings"] = round(player["bet"],2) + round(player["bet"]*1,2,2)
                                player["winnings"] *= 2
                                player["money"] += player["winnings"]
                                slow_print("You have won " + str(player["winnings"]) + " dollars!\n")
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You win both hands!\n")
                                    file.write("You have won " + str(player["winnings"]) + " dollars!\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) == total_player_or_dealer_card_value("hand_1") and total_player_or_dealer_card_value(False) > total_player_or_dealer_card_value("hand_2"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You draw the first hand and lost the second.\n")
                                player["money"] += player["bet"]
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You drew the first hand and lost the second.\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) == total_player_or_dealer_card_value("hand_2") and total_player_or_dealer_card_value(False) > total_player_or_dealer_card_value("hand_1"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You lost the first hand and drew the second.\n")
                                player["money"] += player["bet"]
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You lost the first hand and drew the second.\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) == total_player_or_dealer_card_value("hand_1") and total_player_or_dealer_card_value(False) < total_player_or_dealer_card_value("hand_2"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You drew the first hand and won the second.\n")
                                player["winnings"] = round(player["bet"],2) + round(player["bet"]*1.2,2)
                                player["money"] += player["winnings"] + player["bet"]
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You drew the first hand and won the second.\n")
                                    file.write("You have won " + str(player["winnings"]) + " dollars\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) < total_player_or_dealer_card_value("hand_1") and total_player_or_dealer_card_value(False) == total_player_or_dealer_card_value("hand_2"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You won the first hand and drew the second.\n")
                                player["winnings"] = round(player["bet"],2) + round(player["bet"]*1.2,2)
                                player["money"] += player["winnings"] + player["bet"]
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's hands have a total of " + str(total_player_or_dealer_card_value("hand_1")) + " and " + str(total_player_or_dealer_card_value("hand_2"))+ " respectively.\n" + "You won the first hand and drew the second.\n")
                                    file.write("You have won " + str(player["winnings"]) + " dollars\n")
                        #all outcomes where hand 2 busts
                        elif total_player_or_dealer_card_value("hand_2") > 21 and total_player_or_dealer_card_value(False) <= 21:
                            if total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) > total_player_or_dealer_card_value("hand_1"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's frist hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "The dealer wins.\n")
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's frist hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "The dealer wins.\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) < total_player_or_dealer_card_value("hand_1"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's first hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "You win!!\n")
                                player["winnings"] = round(player["bet"]*1.2,2) + round(player["bet"],2)
                                player["money"] += player["winnings"]
                                slow_print("You have won " + str(player["winnings"]) + " dollars!\n")
                                with open(file_name, "a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's first hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "You win!!\n")
                                    file.write("You have won " + str(player["winnings"]) + " dollars!\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) == total_player_or_dealer_card_value("hand_1"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's first hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "This round is a draw.\n")
                                slow_print("Your bet has been returned to you.\n")
                                with open(file_name, "a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's first hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "This round is a draw.\n")
                                player["money"] += round(player["bet"],2)
                        #all outcomes if hand 1 busts
                        elif total_player_or_dealer_card_value("hand_1") > 21 and total_player_or_dealer_card_value(False) <= 21:
                            if total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) > total_player_or_dealer_card_value("hand_2"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's second hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "The dealer wins.\n")
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's second hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "The dealer wins.\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) < total_player_or_dealer_card_value("hand_2"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's second hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "You win!!\n")
                                player[winnings] = round(player["bet"]*1.2,2) + round(player["bet"],2)
                                player["money"] += player["winnings"]
                                slow_print("Congratulations you have won " + str(player["winnings"]) + " dollars!\n")
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's second hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "You win!!\n")
                                    file.write("You have won " + str(player["winnings"]) + " dollars!\n")
                            elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) == total_player_or_dealer_card_value("hand_2"):
                                slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's second hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "This round is a draw.\n")
                                slow_print("Your bet has been returned to you.\n")
                                player["money"] += round(player["bet"],2)
                                with open(file_name,"a") as file:
                                    file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player's second hand has a total of " + str(total_player_or_dealer_card_value("hand_2"))+ ".\n" + "This round is a draw.\n")
                        #all outcomes if dealer busts
                        else:
                            slow_print("The dealer busts.\nYou win!!\n")
                            with open(file_name,"a") as file:
                                file.write("The dealer busts.\n")
                            #checks if hand 1 busts (wins the money from hand 2)
                            if total_player_or_dealer_card_value("hand_1") > 21:
                                player["winnings"] = round(player["bet"]*1.2,2) + round(player["bet"],2)
                                player["money"] += player["winnings"]
                                slow_print("Congratulations you have won " + str(player["winnings"]) + " dollars!\n")
                                with open(file_name,"a") as file:
                                    file.write("You have won " + str(player["winnings"]) + " dollars!\n")
                            #checks if hand 2 busts (wins the money from hand 1)
                            elif total_player_or_dealer_card_value("hand_2") > 21:
                                player["winnings"] = round(player["bet"]*1.2,2) + round(player["bet"],2)
                                player["money"] += player["winnings"]
                                slow_print("Congratulations you have won " + str(player["winnings"]) + " dollars!\n")
                                with open(file_name,"a") as file:
                                    file.write("You have won " + str(player["winnings"]) + " dollars!\n")
                            #no hands bust and wins money from both hands 
                            else:
                                player["winnings"] = round(player["bet"]*1.2,2) + round(player["bet"],2)
                                player["winnings"] *= 2
                                player["money"] += player["winnings"]
                                slow_print("Congratulations you have won " + str(player["winnings"]) + " dollars!\n")
                                with open(file_name,"a") as file:
                                    file.write("You have won " + str(player["winnings"]) + " dollars!\n")
                current_hand += 1

        #if the hand was not split, the normal game loop continues
        #split_round set to True when split game loop runs 
        if not split_round:
            #calls ace_conversion() to check if the player has an ace that needs to be converted (brings total above 21) or there is an ace that can be converted
            ace_conversion("player")
            #calls double_down() to check if the player can down double and if the player would like to 
            double_down(can_double_down)

        if continue_round and not split_round:
            #not_stand set to True initally and can be change ot False, through player_action() when the player chooses to stand
            not_stand = True

            #player_action is called until the player's hand total goes above 21 or the player stands
            while total_player_or_dealer_card_value(True) <= 21 and not_stand:
                player_action("player")
            
            #checks if the player's hand total is greater than 21, if it is, then the player busts 
            if total_player_or_dealer_card_value(True) > 21:
                time.sleep(0.5)
                slow_print("You have bust and the dealer wins this round.\n")
                with open(file_name,"a") as file:
                    file.write("You have bust an the dealer wins this round\n")
            
            #check all other outcomes 
            else:
                dealer_actions("player")
                time.sleep(0.5)
                #dealer's total is greater than player's and the dealer wins
                if total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) > total_player_or_dealer_card_value(True):
                    slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "The dealer wins.\n")
                    with open(file_name,"a") as file:
                        file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "The dealer wins.\n")
                #player's total is greater than the dealer's, and the player wins
                elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) < total_player_or_dealer_card_value(True):
                    slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "You win!!\n")
                    player["winnings"] = round(player["bet"]*1.2,2) + round(player["bet"],2)
                    player["money"] += player["winnings"]
                    slow_print("Congratulations you have won " + str(player["winnings"]) + " dollars!\n")
                    with open(file_name,"a") as file:
                        file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "You win!!\n")
                        file.write("You have won " + str(player["winnings"]) + " dollars!\n")
                #player's and dealer's total is equal, the round is a draw
                elif total_player_or_dealer_card_value(False) <= 21 and total_player_or_dealer_card_value(False) == total_player_or_dealer_card_value(True):
                    slow_print("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "This round is a draw.\n")
                    slow_print("Your bet has been returned to you.\n")
                    player["money"] += round(player["bet"],2)
                    with open(file_name,"a") as file:
                        file.write("The dealer has a total of " + str(total_player_or_dealer_card_value(False)) + " and the player has a total of " + str(total_player_or_dealer_card_value(True))+ ".\n" + "This round is a draw.\n")
                #the dealer busts
                elif total_player_or_dealer_card_value(False) > 21:
                    slow_print("The dealer busts.\nYou win!!\n")
                    player["winnings"] = round(player["bet"]*1.2,2) + round(player["bet"],2)
                    player["money"] += player["winnings"]
                    slow_print("Congratulations you have won " + str(player["winnings"]) + " dollars!\n")
                    with open(file_name,"a") as file:
                        file.write("The dealer busts. You have won " + str(player["winnings"]) + " dollars!\n")
        time.sleep(1)

        #adds 1 to the round counter
        player["round"] += 1

        #checks if the player has enough money to be the table minimum and if the player does not, the game ends
        if player["money"] < 5:
            slow_print("You have lost all your money and are not able to bet the table minimum. The casino wishes you better luck next time.")
            with open(file_name,"a") as file:
                file.write("You have lost all your money, better luck next time.")
            break
        
        #calls clean_up() to clear all lists used to print cards to terminal and player profile file
        clean_up()

        #checks if the player wants to continue playing blackjack, if an invaild input is recieved, a new input will be continuously requested until a valid input is entered
        continue_play = input(slow_print("Would you like to continue?\n'yes' or 'no'\n> ")).lower()
        if "yes" != continue_play and "no" != continue_play:
            valid = False
            while valid == False:
                continue_play = input(slow_print("Sorry that is not a valid input. Please input 'yes' or 'no'\n> ")).lower()
                if "yes" != continue_play and "no" != continue_play:
                    continue
                else:
                    if continue_play == "yes":
                        break      
        #breaks out of the main game loop and ends the game (player enters a valid input)             
        if continue_play == "no":
            break

        #prints blank space for formatting and clarity
        print("\n\n\n")

    slow_print("\nHave a good day!")
    #breaks out main game loop
    break